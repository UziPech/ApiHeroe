{
  "info": {
    "name": "API SuperhÃ©roes - Test Automatizado MEGA",
    "description": "ColecciÃ³n 100% automatizada - Solo presiona RUN para ejecutar 700 tests automÃ¡ticos (50 casos por endpoint)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "3.0.0"
  },
  "item": [
    {
      "name": "ðŸš€ INICIO - Resetear Contadores",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Resetear todos los contadores al inicio - 50 casos por endpoint",
              "pm.environment.set('registerCount', 0);",
              "pm.environment.set('loginCount', 0);",
              "pm.environment.set('listHeroesCount', 0);",
              "pm.environment.set('createHeroCount', 0);",
              "pm.environment.set('updateHeroCount', 0);",
              "pm.environment.set('deleteHeroCount', 0);",
              "pm.environment.set('listVillainsCount', 0);",
              "pm.environment.set('createVillainCount', 0);",
              "pm.environment.set('updateVillainCount', 0);",
              "pm.environment.set('deleteVillainCount', 0);",
              "pm.environment.set('battleCount', 0);",
              "pm.environment.set('attackCount', 0);",
              "pm.environment.set('duelCount', 0);",
              "pm.environment.set('duelAttackCount', 0);",
              "console.log('âœ… Contadores reseteados - Iniciando 700 tests automÃ¡ticos (50 por endpoint)...');",
              "postman.setNextRequest('Registro (50 casos)');"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "https://apiheroe.vercel.app/",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": [""]
        }
      },
      "response": []
    },
    {
      "name": "Registro (50 casos)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let count = parseInt(pm.environment.get('registerCount') || 0);",
              "count++;",
              "pm.environment.set('registerCount', count);",
              "// Generar datos variados para registro",
              "let domains = ['gmail.com', 'yahoo.com', 'outlook.com', 'hotmail.com', 'test.com'];",
              "let prefixes = ['user', 'test', 'demo', 'hero', 'admin', 'super', 'mega', 'ultra'];",
              "let passwords = ['123456789012', 'password123456', 'testpass1234', 'mypass123456', 'secure123456'];",
              "pm.request.body.raw = JSON.stringify({",
              "  username: prefixes[count % prefixes.length] + 'user' + count,",
              "  email: prefixes[count % prefixes.length] + 'user' + count + '@' + domains[count % domains.length],",
              "  password: passwords[count % passwords.length]",
              "});",
              "console.log(`Ejecutando Registro caso ${count}/50`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200, 400, or 404', function () {",
              "  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
              "});",
              "let count = parseInt(pm.environment.get('registerCount'));",
              "if(count < 50) {",
              "  postman.setNextRequest('Registro (50 casos)');",
              "} else {",
              "  console.log('âœ… Registro completado (50 casos) - Iniciando Login');",
              "  postman.setNextRequest('Login (50 casos)');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": {
          "raw": "https://apiheroe.vercel.app/api/users/register",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": ["api", "users", "register"]
        },
        "body": {
          "mode": "raw",
          "raw": ""
        }
      },
      "response": []
    },
    {
      "name": "Login (50 casos)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let count = parseInt(pm.environment.get('loginCount') || 0);",
              "count++;",
              "pm.environment.set('loginCount', count);",
              "// Usar los mismos datos del registro para login",
              "let domains = ['gmail.com', 'yahoo.com', 'outlook.com', 'hotmail.com', 'test.com'];",
              "let prefixes = ['user', 'test', 'demo', 'hero', 'admin', 'super', 'mega', 'ultra'];",
              "let passwords = ['123456789012', 'password123456', 'testpass1234', 'mypass123456', 'secure123456'];",
              "pm.request.body.raw = JSON.stringify({",
              "  email: prefixes[count % prefixes.length] + 'user' + count + '@' + domains[count % domains.length],",
              "  password: passwords[count % passwords.length]",
              "});",
              "console.log(`Ejecutando Login caso ${count}/50`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "try {",
              "  var json = pm.response.json();",
              "  if(json.token){ pm.environment.set('token', json.token); }",
              "} catch(e) {}",
              "pm.test('Status code is 200, 400, or 404', function () {",
              "  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
              "});",
              "let count = parseInt(pm.environment.get('loginCount'));",
              "if(count < 50) {",
              "  postman.setNextRequest('Login (50 casos)');",
              "} else {",
              "  console.log('âœ… Login completado (50 casos) - Iniciando HÃ©roes');",
              "  postman.setNextRequest('Listar hÃ©roes (50 casos)');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "url": {
          "raw": "https://apiheroe.vercel.app/api/users/login",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": ["api", "users", "login"]
        },
        "body": {
          "mode": "raw",
          "raw": ""
        }
      },
      "response": []
    },
    {
      "name": "Listar hÃ©roes (50 casos)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let count = parseInt(pm.environment.get('listHeroesCount') || 0);",
              "count++;",
              "pm.environment.set('listHeroesCount', count);",
              "console.log(`Ejecutando Listar HÃ©roes caso ${count}/50`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200, 400, or 404', function () {",
              "  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
              "});",
              "let count = parseInt(pm.environment.get('listHeroesCount'));",
              "if(count < 50) {",
              "  postman.setNextRequest('Listar hÃ©roes (50 casos)');",
              "} else {",
              "  console.log('âœ… Listar HÃ©roes completado (50 casos) - Iniciando Crear HÃ©roes');",
              "  postman.setNextRequest('Crear hÃ©roe (50 casos)');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{token}}" }
        ],
        "url": {
          "raw": "https://apiheroe.vercel.app/api/heroes",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": ["api", "heroes"]
        }
      },
      "response": []
    },
    {
      "name": "Crear hÃ©roe (50 casos)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let count = parseInt(pm.environment.get('createHeroCount') || 0);",
              "count++;",
              "pm.environment.set('createHeroCount', count);",
              "",
              "// Arrays ampliados para mayor variedad",
              "let heroes = ['Superman', 'Batman', 'Wonder Woman', 'Flash', 'Green Lantern', 'Aquaman', 'Cyborg', 'Martian Manhunter', 'Green Arrow', 'Supergirl', 'Iron Man', 'Spider-Man', 'Captain America', 'Thor', 'Hulk', 'Black Widow', 'Hawkeye', 'Doctor Strange', 'Ant-Man', 'Wasp', 'Captain Marvel', 'Falcon', 'Winter Soldier', 'Scarlet Witch', 'Vision', 'War Machine', 'Black Panther', 'Star-Lord', 'Gamora', 'Rocket', 'Groot', 'Drax', 'Mantis', 'Nebula', 'Wolverine', 'Cyclops', 'Storm', 'Phoenix', 'Professor X', 'Deadpool', 'X-23', 'Nightcrawler', 'Iceman', 'Colossus', 'Rogue', 'Mystique', 'Beast', 'Angel', 'Psylocke', 'Dazzler'];",
              "let cities = ['Metropolis', 'Gotham City', 'Themyscira', 'Central City', 'Coast City', 'Atlantis', 'Detroit', 'Mars', 'Star City', 'National City', 'New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose', 'Austin', 'Jacksonville', 'Fort Worth', 'Columbus', 'Charlotte', 'San Francisco', 'Indianapolis', 'Seattle', 'Denver', 'Washington DC', 'Boston', 'El Paso', 'Nashville', 'Detroit', 'Oklahoma City', 'Portland', 'Las Vegas', 'Memphis', 'Louisville', 'Baltimore', 'Milwaukee', 'Albuquerque', 'Tucson', 'Fresno', 'Mesa', 'Sacramento', 'Kansas City', 'Atlanta', 'Long Beach', 'Colorado Springs'];",
              "let teams = ['Justice League', 'Teen Titans', 'Birds of Prey', 'Outsiders', 'Doom Patrol', 'Avengers', 'X-Men', 'Fantastic Four', 'Guardians of the Galaxy', 'Defenders', 'Inhumans', 'New Mutants', 'Young Avengers', 'Excalibur', 'Alpha Flight', 'Brotherhood', 'The Runaways', 'Champions', 'Thunderbolts', 'Dark Avengers', 'Mighty Avengers', 'Secret Avengers', 'West Coast Avengers', 'Great Lakes Avengers', 'A-Force', 'Ultimates', 'New Warriors', 'Power Pack', 'Generation X', 'X-Factor', 'X-Force', 'Starjammers', 'Imperial Guard', 'Nova Corps', 'Green Lantern Corps', 'Blue Lanterns', 'Red Lanterns', 'Yellow Lanterns', 'Indigo Tribe', 'Star Sapphires', 'Orange Lanterns', 'Black Lanterns', 'White Lanterns', 'Legion of Super-Heroes', 'Justice Society', 'Suicide Squad', 'Crime Syndicate', 'Freedom Fighters', 'Metal Men', 'Blackhawks'];",
              "",
              "pm.request.body.raw = JSON.stringify({",
              "  name: heroes[(count-1) % heroes.length] + count,",
              "  alias: 'Alias' + count,",
              "  city: cities[(count-1) % cities.length],",
              "  team: teams[(count-1) % teams.length]",
              "});",
              "console.log(`Ejecutando Crear HÃ©roe caso ${count}/50 - ${heroes[(count-1) % heroes.length]}`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200, 400, or 404', function () {",
              "  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
              "});",
              "let count = parseInt(pm.environment.get('createHeroCount'));",
              "if(count < 50) {",
              "  postman.setNextRequest('Crear hÃ©roe (50 casos)');",
              "} else {",
              "  console.log('âœ… Crear HÃ©roes completado (50 casos) - Iniciando Actualizar HÃ©roes');",
              "  postman.setNextRequest('Actualizar hÃ©roe (50 casos)');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{token}}" }
        ],
        "url": {
          "raw": "https://apiheroe.vercel.app/api/heroes",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": ["api", "heroes"]
        },
        "body": {
          "mode": "raw",
          "raw": ""
        }
      },
      "response": []
    },
    {
      "name": "Actualizar hÃ©roe (50 casos)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let count = parseInt(pm.environment.get('updateHeroCount') || 0);",
              "count++;",
              "pm.environment.set('updateHeroCount', count);",
              "",
              "// Arrays expandidos para actualizaciones variadas",
              "let updatedNames = ['Updated Superman', 'Modified Batman', 'Enhanced Wonder Woman', 'Improved Flash', 'Upgraded Green Lantern', 'Evolved Aquaman', 'Advanced Cyborg', 'Transformed Martian Manhunter', 'Refined Green Arrow', 'Boosted Supergirl', 'Enhanced Iron Man', 'Modified Spider-Man', 'Improved Captain America', 'Upgraded Thor', 'Evolved Hulk', 'Advanced Black Widow', 'Transformed Hawkeye', 'Refined Doctor Strange', 'Boosted Ant-Man', 'Enhanced Wasp', 'Modified Captain Marvel', 'Improved Falcon', 'Upgraded Winter Soldier', 'Evolved Scarlet Witch', 'Advanced Vision', 'Transformed War Machine', 'Refined Black Panther', 'Boosted Star-Lord', 'Enhanced Gamora', 'Modified Rocket', 'Improved Groot', 'Upgraded Drax', 'Evolved Mantis', 'Advanced Nebula', 'Transformed Wolverine', 'Refined Cyclops', 'Boosted Storm', 'Enhanced Phoenix', 'Modified Professor X', 'Improved Deadpool', 'Upgraded X-23', 'Evolved Nightcrawler', 'Advanced Iceman', 'Transformed Colossus', 'Refined Rogue', 'Boosted Mystique', 'Enhanced Beast', 'Modified Angel', 'Improved Psylocke', 'Upgraded Dazzler'];",
              "let updatedAliases = ['Ultimate Alias', 'Supreme Identity', 'Prime Persona', 'Alpha Ego', 'Beta Character', 'Gamma Self', 'Delta Persona', 'Epsilon Identity', 'Zeta Character', 'Eta Alias', 'Theta Ego', 'Iota Self', 'Kappa Persona', 'Lambda Identity', 'Mu Character', 'Nu Alias', 'Xi Ego', 'Omicron Self', 'Pi Persona', 'Rho Identity', 'Sigma Character', 'Tau Alias', 'Upsilon Ego', 'Phi Self', 'Chi Persona', 'Psi Identity', 'Omega Character', 'Alpha Prime', 'Beta Supreme', 'Gamma Ultimate', 'Delta Prime', 'Epsilon Supreme', 'Zeta Ultimate', 'Eta Prime', 'Theta Supreme', 'Iota Ultimate', 'Kappa Prime', 'Lambda Supreme', 'Mu Ultimate', 'Nu Prime', 'Xi Supreme', 'Omicron Ultimate', 'Pi Prime', 'Rho Supreme', 'Sigma Ultimate', 'Tau Prime', 'Upsilon Supreme', 'Phi Ultimate', 'Chi Prime', 'Psi Supreme'];",
              "let updatedTeams = ['Elite Justice League', 'Premium Avengers', 'Advanced X-Men', 'Ultimate Fantastic Four', 'Supreme Guardians', 'Enhanced Defenders', 'Evolved Inhumans', 'Upgraded Teen Titans', 'Modified Birds of Prey', 'Improved Outsiders', 'Refined Doom Patrol', 'Boosted Champions', 'Enhanced Thunderbolts', 'Advanced New Warriors', 'Ultimate Power Pack', 'Supreme Generation X', 'Elite X-Factor', 'Premium X-Force', 'Enhanced Excalibur', 'Evolved Alpha Flight', 'Upgraded Brotherhood', 'Modified Runaways', 'Improved Young Avengers', 'Refined A-Force', 'Boosted Ultimates', 'Enhanced Secret Avengers', 'Advanced Mighty Avengers', 'Ultimate West Coast Avengers', 'Supreme Dark Avengers', 'Elite Great Lakes Avengers', 'Premium Nova Corps', 'Enhanced Green Lantern Corps', 'Evolved Blue Lanterns', 'Upgraded Red Lanterns', 'Modified Yellow Lanterns', 'Improved Indigo Tribe', 'Refined Star Sapphires', 'Boosted Orange Lanterns', 'Enhanced Black Lanterns', 'Advanced White Lanterns', 'Ultimate Legion of Super-Heroes', 'Supreme Justice Society', 'Elite Suicide Squad', 'Premium Crime Syndicate', 'Enhanced Freedom Fighters', 'Evolved Metal Men', 'Upgraded Blackhawks', 'Modified Doom Force', 'Improved Shadow Cabinet', 'Refined Milestone Media'];",
              "",
              "let heroId = Math.floor(Math.random() * 100) + 1;",
              "pm.environment.set('heroId', heroId);",
              "pm.request.body.raw = JSON.stringify({",
              "  name: updatedNames[(count-1) % updatedNames.length] + ' ' + count,",
              "  alias: updatedAliases[(count-1) % updatedAliases.length] + count,",
              "  city: 'UpdatedCity' + count,",
              "  team: updatedTeams[(count-1) % updatedTeams.length]",
              "});",
              "console.log(`Ejecutando Actualizar HÃ©roe caso ${count}/50 - ID: ${heroId}`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200, 400, or 404', function () {",
              "  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
              "});",
              "let count = parseInt(pm.environment.get('updateHeroCount'));",
              "if(count < 50) {",
              "  postman.setNextRequest('Actualizar hÃ©roe (50 casos)');",
              "} else {",
              "  console.log('âœ… Actualizar HÃ©roes completado (50 casos) - Iniciando Eliminar HÃ©roes');",
              "  postman.setNextRequest('Eliminar hÃ©roe (50 casos)');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{token}}" }
        ],
        "url": {
          "raw": "https://apiheroe.vercel.app/api/heroes/{{heroId}}",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": ["api", "heroes", "{{heroId}}"]
        },
        "body": {
          "mode": "raw",
          "raw": ""
        }
      },
      "response": []
    },
    {
      "name": "Eliminar hÃ©roe (50 casos)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let count = parseInt(pm.environment.get('deleteHeroCount') || 0);",
              "count++;",
              "pm.environment.set('deleteHeroCount', count);",
              "let heroId = Math.floor(Math.random() * 100) + 1;",
              "pm.environment.set('heroId', heroId);",
              "console.log(`Ejecutando Eliminar HÃ©roe caso ${count}/50 - ID: ${heroId}`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200, 400, or 404', function () {",
              "  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
              "});",
              "let count = parseInt(pm.environment.get('deleteHeroCount'));",
              "if(count < 50) {",
              "  postman.setNextRequest('Eliminar hÃ©roe (50 casos)');",
              "} else {",
              "  console.log('âœ… Eliminar HÃ©roes completado (50 casos) - Iniciando Villanos');",
              "  postman.setNextRequest('Listar villanos (50 casos)');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          { "key": "Authorization", "value": "Bearer {{token}}" }
        ],
        "url": {
          "raw": "https://apiheroe.vercel.app/api/heroes/{{heroId}}",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": ["api", "heroes", "{{heroId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Listar villanos (50 casos)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let count = parseInt(pm.environment.get('listVillainsCount') || 0);",
              "count++;",
              "pm.environment.set('listVillainsCount', count);",
              "console.log(`Ejecutando Listar Villanos caso ${count}/50`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200, 400, or 404', function () {",
              "  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
              "});",
              "let count = parseInt(pm.environment.get('listVillainsCount'));",
              "if(count < 50) {",
              "  postman.setNextRequest('Listar villanos (50 casos)');",
              "} else {",
              "  console.log('âœ… Listar Villanos completado (50 casos) - Iniciando Crear Villanos');",
              "  postman.setNextRequest('Crear villano (50 casos)');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          { "key": "Authorization", "value": "Bearer {{token}}" }
        ],
        "url": {
          "raw": "https://apiheroe.vercel.app/api/villains",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": ["api", "villains"]
        }
      },
      "response": []
    },
    {
      "name": "Crear villano (50 casos)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let count = parseInt(pm.environment.get('createVillainCount') || 0);",
              "count++;",
              "pm.environment.set('createVillainCount', count);",
              "",
              "// Arrays expandidos para villanos con gran variedad",
              "let villains = ['Joker', 'Lex Luthor', 'Harley Quinn', 'Penguin', 'Riddler', 'Two-Face', 'Catwoman', 'Poison Ivy', 'Scarecrow', 'Bane', 'Thanos', 'Loki', 'Red Skull', 'Doctor Doom', 'Magneto', 'Green Goblin', 'Venom', 'Carnage', 'Ultron', 'Galactus', 'Darkseid', 'Doomsday', 'Brainiac', 'Sinestro', 'Atrocitus', 'Parallax', 'Anti-Monitor', 'Nekron', 'Black Adam', 'Bizarro', 'Metallo', 'Parasite', 'General Zod', 'Deathstroke', 'Ra\\'s al Ghul', 'Talia al Ghul', 'Black Manta', 'Ocean Master', 'Captain Cold', 'Heat Wave', 'Mirror Master', 'Weather Wizard', 'Gorilla Grodd', 'Reverse Flash', 'Zoom', 'Savitar', 'Vandal Savage', 'Solomon Grundy', 'Clayface', 'Mr. Freeze'];",
              "let villainCities = ['Gotham City', 'Metropolis', 'Central City', 'Star City', 'Coast City', 'Atlantis', 'Apokolips', 'Oa', 'Qward', 'Zamaron', 'Ysmault', 'Nok', 'Odym', 'Ryut', 'Maltus', 'New Genesis', 'Thanagar', 'Rann', 'Krypton', 'Czarnia', 'Daxam', 'Korugar', 'Bolovax Vik', 'H\\'lven', 'Mogo', 'Xudar', 'Ungara', 'Graxos IV', 'Sector 666', 'Warworld', 'Citadel', 'Tamaran', 'Vega System', 'Alpha Centauri', 'Colu', 'Bgztl', 'Titan', 'Winath', 'Bismoll', 'Durla', 'Cargg', 'Imsk', 'Lallor', 'Kathoon', 'Naltor', 'Bgztl', 'Ventura', 'Orando', 'Xanthu'];",
              "let villainTeams = ['Legion of Doom', 'Injustice League', 'Secret Society', 'Suicide Squad', 'Brotherhood of Evil Mutants', 'Sinister Six', 'Masters of Evil', 'Frightful Four', 'Serpent Society', 'Hydra', 'AIM', 'Hand', 'League of Assassins', 'Court of Owls', 'Black Lantern Corps', 'Sinestro Corps', 'Red Lantern Corps', 'Orange Lantern Corps', 'Apokolips Elite', 'Female Furies', 'Darkseid Elite', 'Crime Syndicate', 'Anti-Justice League', 'Ultraman Corps', 'Shadowpact', 'Intergang', 'H.I.V.E.', 'Kobra Cult', 'Secret Six', 'Birds of Prey (Evil)', 'Tartarus', 'Citadel Empire', 'Omega Men (Evil)', 'Manhunters', 'Dominators', 'Khunds', 'Psions', 'Gordanians', 'Thanagarian Empire', 'Rann Military', 'Zeta Beam Pirates', 'Space Pirates', 'Blackstar Corps', 'Ultraviolet Corps', 'Invisible Spectrum', 'White Mercy Cult', 'Black Diamond Society', 'Phantom Zone Criminals', 'Bizarro League', 'Anti-Matter Universe'];",
              "",
              "pm.request.body.raw = JSON.stringify({",
              "  name: villains[(count-1) % villains.length] + count,",
              "  alias: 'VillainAlias' + count,",
              "  city: villainCities[(count-1) % villainCities.length],",
              "  team: villainTeams[(count-1) % villainTeams.length]",
              "});",
              "console.log(`Ejecutando Crear Villano caso ${count}/50 - ${villains[(count-1) % villains.length]}`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200, 400, or 404', function () {",
              "  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
              "});",
              "let count = parseInt(pm.environment.get('createVillainCount'));",
              "if(count < 50) {",
              "  postman.setNextRequest('Crear villano (50 casos)');",
              "} else {",
              "  console.log('âœ… Crear Villanos completado (50 casos) - Iniciando Actualizar Villanos');",
              "  postman.setNextRequest('Actualizar villano (50 casos)');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{token}}" }
        ],
        "url": {
          "raw": "https://apiheroe.vercel.app/api/villains",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": ["api", "villains"]
        },
        "body": {
          "mode": "raw",
          "raw": ""
        }
      },
      "response": []
    },
    {
      "name": "Actualizar villano (10 casos)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let count = parseInt(pm.environment.get('updateVillainCount') || 0);",
              "count++;",
              "pm.environment.set('updateVillainCount', count);",
              "let villainId = Math.floor(Math.random() * 18) + 1;",
              "pm.environment.set('villainId', villainId);",
              "pm.request.body.raw = JSON.stringify({",
              "  name: 'UpdatedVillain' + count,",
              "  alias: 'UpdatedVillainAlias' + count,",
              "  city: 'UpdatedVillainCity' + count,",
              "  team: 'UpdatedVillainTeam' + count",
              "});",
              "console.log(`Ejecutando Actualizar Villano caso ${count}/10`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200, 400, or 404', function () {",
              "  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
              "});",
              "let count = parseInt(pm.environment.get('updateVillainCount'));",
              "if(count < 10) {",
              "  postman.setNextRequest('Actualizar villano (10 casos)');",
              "} else {",
              "  console.log('âœ… Actualizar Villanos completado - Iniciando Eliminar Villanos');",
              "  postman.setNextRequest('Eliminar villano (10 casos)');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{token}}" }
        ],
        "url": {
          "raw": "https://apiheroe.vercel.app/api/villains/{{villainId}}",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": ["api", "villains", "{{villainId}}"]
        },
        "body": {
          "mode": "raw",
          "raw": ""
        }
      },
      "response": []
    },
    {
      "name": "Eliminar villano (10 casos)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let count = parseInt(pm.environment.get('deleteVillainCount') || 0);",
              "count++;",
              "pm.environment.set('deleteVillainCount', count);",
              "let villainId = Math.floor(Math.random() * 18) + 1;",
              "pm.environment.set('villainId', villainId);",
              "console.log(`Ejecutando Eliminar Villano caso ${count}/10`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200, 400, or 404', function () {",
              "  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
              "});",
              "let count = parseInt(pm.environment.get('deleteVillainCount'));",
              "if(count < 10) {",
              "  postman.setNextRequest('Eliminar villano (10 casos)');",
              "} else {",
              "  console.log('âœ… Eliminar Villanos completado - Iniciando Batallas');",
              "  postman.setNextRequest('Crear batalla en equipo (10 casos)');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          { "key": "Authorization", "value": "Bearer {{token}}" }
        ],
        "url": {
          "raw": "https://apiheroe.vercel.app/api/villains/{{villainId}}",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": ["api", "villains", "{{villainId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Crear batalla en equipo (10 casos)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let count = parseInt(pm.environment.get('battleCount') || 0);",
              "count++;",
              "pm.environment.set('battleCount', count);",
              "let heroes = []; while(heroes.length < 3){ let id = Math.floor(Math.random() * 30) + 1; if(!heroes.includes(id)) heroes.push(id); }",
              "let villains = []; while(villains.length < 3){ let id = Math.floor(Math.random() * 18) + 1; if(!villains.includes(id)) villains.push(id); }",
              "pm.request.body.raw = JSON.stringify({",
              "  heroes: heroes,",
              "  villains: villains,",
              "  userSide: 'heroes',",
              "  firstHero: heroes[0],",
              "  firstVillain: villains[0],",
              "  heroConfig: {},",
              "  villainConfig: {}",
              "});",
              "console.log(`Ejecutando Crear Batalla caso ${count}/10`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "try {",
              "  var json = pm.response.json();",
              "  if(json.battleId || json.id || json._id) {",
              "    let battleId = json.battleId || json.id || json._id;",
              "    pm.environment.set('currentBattleId', battleId);",
              "  }",
              "} catch(e) {}",
              "pm.test('Status code is 200, 400, or 404', function () {",
              "  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
              "});",
              "let count = parseInt(pm.environment.get('battleCount'));",
              "if(count < 10) {",
              "  postman.setNextRequest('Crear batalla en equipo (10 casos)');",
              "} else {",
              "  console.log('âœ… Crear Batallas completado - Iniciando Ataques en Batalla');",
              "  postman.setNextRequest('Realizar ataque en batalla (10 casos)');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{token}}" }
        ],
        "url": {
          "raw": "https://apiheroe.vercel.app/api/battles/team",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": ["api", "battles", "team"]
        },
        "body": {
          "mode": "raw",
          "raw": ""
        }
      },
      "response": []
    },
    {
      "name": "Realizar ataque en batalla (10 casos)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let count = parseInt(pm.environment.get('attackCount') || 0);",
              "count++;",
              "pm.environment.set('attackCount', count);",
              "let battleId = pm.environment.get('currentBattleId') || '1753423139965';",
              "let attackerId = Math.floor(Math.random() * 30) + 1;",
              "let attackTypes = ['basico', 'especial', 'critico'];",
              "let attackType = attackTypes[Math.floor(Math.random() * attackTypes.length)];",
              "pm.request.body.raw = JSON.stringify({",
              "  attacker: attackerId,",
              "  attackType: attackType",
              "});",
              "pm.request.url.path = ['api', 'battles', battleId, 'attack'];",
              "console.log(`Ejecutando Ataque en Batalla caso ${count}/10`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200, 400, or 404', function () {",
              "  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
              "});",
              "let count = parseInt(pm.environment.get('attackCount'));",
              "if(count < 10) {",
              "  postman.setNextRequest('Realizar ataque en batalla (10 casos)');",
              "} else {",
              "  console.log('âœ… Ataques en Batalla completados - Iniciando Duelos');",
              "  postman.setNextRequest('Crear duelo 1vs1 (10 casos)');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{token}}" }
        ],
        "url": {
          "raw": "https://apiheroe.vercel.app/api/battles/{{currentBattleId}}/attack",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": ["api", "battles", "{{currentBattleId}}", "attack"]
        },
        "body": {
          "mode": "raw",
          "raw": ""
        }
      },
      "response": []
    },
    {
      "name": "Crear duelo 1vs1 (10 casos)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let count = parseInt(pm.environment.get('duelCount') || 0);",
              "count++;",
              "pm.environment.set('duelCount', count);",
              "let heroId = Math.floor(Math.random() * 30) + 1;",
              "let villainId = Math.floor(Math.random() * 18) + 1;",
              "pm.request.body.raw = JSON.stringify({",
              "  heroId: heroId,",
              "  villainId: villainId,",
              "  userSide: 'hero'",
              "});",
              "console.log(`Ejecutando Crear Duelo caso ${count}/10`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "try {",
              "  var json = pm.response.json();",
              "  if(json.duelId || json.id || json._id) {",
              "    let duelId = json.duelId || json.id || json._id;",
              "    pm.environment.set('currentDuelId', duelId);",
              "  }",
              "} catch(e) {}",
              "pm.test('Status code is 200, 400, or 404', function () {",
              "  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
              "});",
              "let count = parseInt(pm.environment.get('duelCount'));",
              "if(count < 10) {",
              "  postman.setNextRequest('Crear duelo 1vs1 (10 casos)');",
              "} else {",
              "  console.log('âœ… Crear Duelos completado - Iniciando Ataques en Duelo');",
              "  postman.setNextRequest('Realizar ataque en duelo (10 casos)');",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{token}}" }
        ],
        "url": {
          "raw": "https://apiheroe.vercel.app/api/duels",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": ["api", "duels"]
        },
        "body": {
          "mode": "raw",
          "raw": ""
        }
      },
      "response": []
    },
    {
      "name": "Realizar ataque en duelo (10 casos)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              "let count = parseInt(pm.environment.get('duelAttackCount') || 0);",
              "count++;",
              "pm.environment.set('duelAttackCount', count);",
              "let attackerId = Math.floor(Math.random() * 30) + 1;",
              "let attackTypes = ['basico', 'especial', 'critico'];",
              "let attackType = attackTypes[Math.floor(Math.random() * attackTypes.length)];",
              "pm.request.body.raw = JSON.stringify({",
              "  attackerId: attackerId,",
              "  attackType: attackType",
              "});",
              "console.log(`Ejecutando Ataque en Duelo caso ${count}/10`);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test('Status code is 200, 400, or 404', function () {",
              "  pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
              "});",
              "let count = parseInt(pm.environment.get('duelAttackCount'));",
              "if(count < 10) {",
              "  postman.setNextRequest('Realizar ataque en duelo (10 casos)');",
              "} else {",
              "  console.log('ðŸŽ‰ TODOS LOS TESTS COMPLETADOS! 140 casos ejecutados exitosamente');",
              "  postman.setNextRequest(null);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" },
          { "key": "Authorization", "value": "Bearer {{token}}" }
        ],
        "url": {
          "raw": "https://apiheroe.vercel.app/api/duels/attack",
          "protocol": "https",
          "host": ["apiheroe", "vercel", "app"],
          "path": ["api", "duels", "attack"]
        },
        "body": {
          "mode": "raw",
          "raw": ""
        }
      },
      "response": []
    }
  ]
}
